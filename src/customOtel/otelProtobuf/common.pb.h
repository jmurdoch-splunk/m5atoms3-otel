/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8-dev */

#ifndef PB_COMMON_PB_H_INCLUDED
#define PB_COMMON_PB_H_INCLUDED
#include "pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
/* ArrayValue is a list of AnyValue messages. We need ArrayValue as a message
 since oneof in AnyValue does not allow repeated fields. */
typedef struct _ArrayValue {
    /* Array of values. The array may be empty (contain 0 elements). */
    pb_callback_t values;
} ArrayValue;

/* KeyValueList is a list of KeyValue messages. We need KeyValueList as a message
 since `oneof` in AnyValue does not allow repeated fields. Everywhere else where we need
 a list of KeyValue messages (e.g. in Span) we use `repeated KeyValue` directly to
 avoid unnecessary extra wrapping (which slows down the protocol). The 2 approaches
 are semantically equivalent. */
typedef struct _KeyValueList {
    /* A collection of key/value pairs of key-value pairs. The list may be empty (may
 contain 0 elements).
 The keys MUST be unique (it is not allowed to have more than one
 value with the same key). */
    pb_callback_t values;
} KeyValueList;

/* AnyValue is used to represent any type of attribute value. AnyValue may contain a
 primitive value such as a string or integer or it may contain an arbitrary nested
 object containing arrays, key-value lists and primitives. */
typedef struct _AnyValue {
    pb_size_t which_value;
    union {
        pb_callback_t string_value;
        bool bool_value;
        int64_t int_value;
        double double_value;
        ArrayValue array_value;
        KeyValueList kvlist_value;
        pb_callback_t bytes_value;
    } value;
} AnyValue;

/* KeyValue is a key-value pair that is used to store Span attributes, Link
 attributes, etc. */
typedef struct _KeyValue {
    pb_callback_t key;
    bool has_value;
    AnyValue value;
} KeyValue;

/* InstrumentationScope is a message representing the instrumentation scope information
 such as the fully qualified name and version. */
typedef struct _InstrumentationScope {
    /* An empty instrumentation scope name means the name is unknown. */
    pb_callback_t name;
    pb_callback_t version;
    pb_callback_t attributes;
    uint32_t dropped_attributes_count;
} InstrumentationScope;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define AnyValue_init_default                    {0, {{{NULL}, NULL}}}
#define ArrayValue_init_default                  {{{NULL}, NULL}}
#define KeyValueList_init_default                {{{NULL}, NULL}}
#define KeyValue_init_default                    {{{NULL}, NULL}, false, AnyValue_init_default}
#define InstrumentationScope_init_default        {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, 0}
#define AnyValue_init_zero                       {0, {{{NULL}, NULL}}}
#define ArrayValue_init_zero                     {{{NULL}, NULL}}
#define KeyValueList_init_zero                   {{{NULL}, NULL}}
#define KeyValue_init_zero                       {{{NULL}, NULL}, false, AnyValue_init_zero}
#define InstrumentationScope_init_zero           {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, 0}

/* Field tags (for use in manual encoding/decoding) */
#define ArrayValue_values_tag                    1
#define KeyValueList_values_tag                  1
#define AnyValue_string_value_tag                1
#define AnyValue_bool_value_tag                  2
#define AnyValue_int_value_tag                   3
#define AnyValue_double_value_tag                4
#define AnyValue_array_value_tag                 5
#define AnyValue_kvlist_value_tag                6
#define AnyValue_bytes_value_tag                 7
#define KeyValue_key_tag                         1
#define KeyValue_value_tag                       2
#define InstrumentationScope_name_tag            1
#define InstrumentationScope_version_tag         2
#define InstrumentationScope_attributes_tag      3
#define InstrumentationScope_dropped_attributes_count_tag 4

/* Struct field encoding specification for nanopb */
#define AnyValue_FIELDLIST(X, a) \
X(a, CALLBACK, ONEOF,    STRING,   (value,string_value,value.string_value),   1) \
X(a, STATIC,   ONEOF,    BOOL,     (value,bool_value,value.bool_value),   2) \
X(a, STATIC,   ONEOF,    INT64,    (value,int_value,value.int_value),   3) \
X(a, STATIC,   ONEOF,    DOUBLE,   (value,double_value,value.double_value),   4) \
X(a, STATIC,   ONEOF,    MESSAGE,  (value,array_value,value.array_value),   5) \
X(a, STATIC,   ONEOF,    MESSAGE,  (value,kvlist_value,value.kvlist_value),   6) \
X(a, CALLBACK, ONEOF,    BYTES,    (value,bytes_value,value.bytes_value),   7)
#define AnyValue_CALLBACK pb_default_field_callback
#define AnyValue_DEFAULT NULL
#define AnyValue_value_array_value_MSGTYPE ArrayValue
#define AnyValue_value_kvlist_value_MSGTYPE KeyValueList

#define ArrayValue_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  values,            1)
#define ArrayValue_CALLBACK pb_default_field_callback
#define ArrayValue_DEFAULT NULL
#define ArrayValue_values_MSGTYPE AnyValue

#define KeyValueList_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  values,            1)
#define KeyValueList_CALLBACK pb_default_field_callback
#define KeyValueList_DEFAULT NULL
#define KeyValueList_values_MSGTYPE KeyValue

#define KeyValue_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   key,               1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  value,             2)
#define KeyValue_CALLBACK pb_default_field_callback
#define KeyValue_DEFAULT NULL
#define KeyValue_value_MSGTYPE AnyValue

#define InstrumentationScope_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   name,              1) \
X(a, CALLBACK, SINGULAR, STRING,   version,           2) \
X(a, CALLBACK, REPEATED, MESSAGE,  attributes,        3) \
X(a, STATIC,   SINGULAR, UINT32,   dropped_attributes_count,   4)
#define InstrumentationScope_CALLBACK pb_default_field_callback
#define InstrumentationScope_DEFAULT NULL
#define InstrumentationScope_attributes_MSGTYPE KeyValue

extern const pb_msgdesc_t AnyValue_msg;
extern const pb_msgdesc_t ArrayValue_msg;
extern const pb_msgdesc_t KeyValueList_msg;
extern const pb_msgdesc_t KeyValue_msg;
extern const pb_msgdesc_t InstrumentationScope_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define AnyValue_fields &AnyValue_msg
#define ArrayValue_fields &ArrayValue_msg
#define KeyValueList_fields &KeyValueList_msg
#define KeyValue_fields &KeyValue_msg
#define InstrumentationScope_fields &InstrumentationScope_msg

/* Maximum encoded size of messages (where known) */
/* AnyValue_size depends on runtime parameters */
/* ArrayValue_size depends on runtime parameters */
/* KeyValueList_size depends on runtime parameters */
/* KeyValue_size depends on runtime parameters */
/* InstrumentationScope_size depends on runtime parameters */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
